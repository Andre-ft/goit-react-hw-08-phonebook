{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css","redux/contacts/contactsSlice.js","components/Spinner/Spinner.js","components/ContactListItem/ContactListItem.jsx","contexts/context.js","components/ContactList/ContactList.jsx","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/store.js","contexts/Provider.js","index.js"],"names":["module","exports","contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","body","name","number","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","spin","keyframes","Spinner","CgSpinner","defaultProps","size","ContactListItem","id","isDeleting","isLoading","className","s","contactList__item","type","deleteButton","onClick","disabled","createContext","ContactList","filter","useContext","Context","data","isFetching","arr","value","normalizedFilter","toLowerCase","contact","includes","getVisibleContacts","map","createAction","payload","shortid","generate","ContactForm","useState","setName","setNumber","btnEnable","setBtnEnable","nameInputId","isSuccess","numberInputId","handleChange","e","currentTarget","find","alert","checkName","containerStyle","duration","position","style","background","form","onSubmit","preventDefault","toast","htmlFor","input","pattern","title","required","onChange","button","Filter","setFilter","App","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","Provider","children","providerValue","useMemo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5e48f37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2-q5N\",\"input\":\"ContactForm_input__1382s\",\"button\":\"ContactForm_button__OBqyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactListItem_contactList__item__fGcDN\",\"deleteButton\":\"ContactListItem_deleteButton__JUaaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__1gMCN\",\"deleteButton\":\"ContactList_deleteButton__Hv83B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1FN7R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1kkVC\"};","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactApi = createApi({\r\n  reducerPath: 'contactApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61fe5bafa58a4e00173c97fc.mockapi.io/api/v1/',\r\n  }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => '/contacts',\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: contactId => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    createContact: builder.mutation({\r\n      query: ({ name, number }) => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: {\r\n          name,\r\n          number,\r\n        },\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n  useCreateContactMutation,\r\n} = contactApi;\r\n","import styled from '@emotion/styled/macro';\r\nimport { keyframes } from '@emotion/react';\r\nimport { CgSpinner } from 'react-icons/cg';\r\n\r\nconst spin = keyframes`\r\n0% {\r\n  transform: rotate(0deg);\r\n}\r\n100% {\r\n  transform: rotate(1turn);\r\n}\r\n`;\r\n\r\nexport const Spinner = styled(CgSpinner)`\r\n  animation: ${spin} 0.85s linear infinite;\r\n`;\r\n\r\nSpinner.defaultProps = {\r\n  size: 40,\r\n};\r\n","import React from 'react';\r\nimport s from './ContactListItem.module.css';\r\nimport { useFetchContactsQuery, useDeleteContactMutation } from '../../redux/contacts/contactsSlice';\r\nimport { Spinner } from '../Spinner/Spinner';\r\n\r\n\r\nexport const ContactListItem = ({id, name, number}) => {\r\n    const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\r\n\r\n    return (\r\n         <li className={s.contactList__item}>\r\n          {name} : {number}\r\n          <button\r\n            type=\"button\"\r\n            className={s.deleteButton}\r\n            onClick={() => deleteContact(id)}\r\n            disabled={isDeleting}\r\n          >\r\n            {isDeleting && <Spinner size={12} />}\r\n            Delete\r\n          </button>\r\n        </li>\r\n    )\r\n}","import { createContext } from 'react';\n\nexport default createContext();\n","import React, {useContext} from 'react';\nimport s from './ContactList.module.css';\nimport { useFetchContactsQuery, useDeleteContactMutation } from '../../redux/contacts/contactsSlice';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport Context from '../../contexts/context';\n\n\nexport default function ContactList() {\n  const { filter } = useContext(Context);\n  const { data, isFetching } = useFetchContactsQuery();\n\n  const getVisibleContacts = (arr, value) => {\n    const normalizedFilter = value.toLowerCase();\n\n    return arr.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  \n  // const contactList = useSelector(({ contacts: { filter, items } }) => getVisibleContacts(items, filter));\n  // const contactList = data;\n  // const contactList = getVisibleContacts(data, filter);\n  // const dispatch = useDispatch();\n  // const onDeleteContact = (id) => deleteContact(id);\n  \n\n  return (<>\n    <ul className={s.contactList__item}>\n      {data && getVisibleContacts(data, filter).map((contact) => (\n        < ContactListItem key={contact.id} {...contact} />\n      ))}\n    </ul>\n  </>)\n};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// prepareCallback\r\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n// export const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\n// export const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","import React, {  useState } from 'react';\nimport shortid from 'shortid';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport {addContact, deleteContact, changeFilter} from '../../redux/contacts/contacts-actions'\nimport { getItems } from '../../redux/contacts/contacts-selectors';\nimport { useFetchContactsQuery, useCreateContactMutation } from '../../redux/contacts/contactsSlice';\nimport { Spinner } from '../Spinner/Spinner';\nimport  toast, { Toaster }  from 'react-hot-toast';\n\n\n// function ContactForm({ onSubmit, contactList }) {\nexport default function ContactForm() {\n  // state = {\n    //   name: '',\n    //   number: '',\n    //   btnEnable: true,\n    // };\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [btnEnable, setBtnEnable] = useState(true);\n    \n  // const contactList = useSelector(getItems);\n  const { data, isFetching } = useFetchContactsQuery();\n  const [createContact, { isLoading, isSuccess }] = useCreateContactMutation();\n  \n  // const dispatch = useDispatch();\n  const onSubmit = () => createContact({ name, number });\n  \n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const checkName = (name) => {\n    \n    const check = data ? data.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    ) : false;\n\n    if (check) {\n      setBtnEnable(false);\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    setBtnEnable(true);\n  }\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    name === 'name' && checkName(value);\n\n    switch (name) {\n      case 'name': setName(value);        \n        break;\n\n      case 'number': setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const containerStyle = {\n    duration: 3000,\n    position: 'top-right',\n    style: {\n      background: 'lawngreen',\n      // top: 5,\n      // right: 5,\n    },\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    toast('Contact added', containerStyle);\n\n    onSubmit({name, number});\n    \n    setName('');\n    setNumber('');\n\n  };\n\n\n    return (<>\n      <Toaster />\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId} className={s.input}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n          />\n        </label>\n\n        <label htmlFor={numberInputId} className={s.input}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className={s.button}\n          disabled={!btnEnable || isLoading}\n        >\n          {isLoading && <Spinner size={12} />}\n          Add contact\n        </button>\n      </form>\n      </>\n    );\n}\n\n// export default ContactForm;\n\n// const mapStateToProps = state =>{\n//  return {\n//    contactList: state.contacts.items,\n\n//  }\n// }\n// const mapDispatchToProps = dispatch => {\n// return {\n//     onSubmit: ({name, number}) => dispatch(addContact({name, number}))\n//   }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React, {  useState, useContext } from 'react';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport Context from '../../contexts/context';\nimport s from './Filter.module.css';\n\n\nexport default function Filter() {\n  const { filter, setFilter } = useContext(Context)\n  // const [value, setValue] = useState('')\n  // const value = useSelector(getFilter);\n  // const dispatch = useDispatch();\n  const onChange = (e) => setFilter(e.currentTarget.value);\n  return (\n    <label className={s.filter}>\n      Find contacts by name\n      <input type=\"text\" value={filter} onChange={onChange} />\n    </label>\n  );\n};\n\n// export default Filter;\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter\n// })\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onChange: (e)=> dispatch(changeFilter(e.currentTarget.value))\n//   }\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\nimport shortid from 'shortid';\nimport * as actions from './redux/contacts/contacts-actions';\n// import { addContact, deleteContact, changeFilter };\n\n// function App() {\nexport const App = () => {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // вместо useEffect используем persist\n  /*useEffect(() => {\n    if (!contacts.length) {\n      const savedContacts = localStorage.getItem('contacts');\n      const parsedContacts = JSON.parse(savedContacts);\n\n      if (parsedContacts) {\n        parsedContacts.map(({ name, number }) => addContact({ name, number }));\n        // setContacts(parsedContacts);\n      }\n      return;\n    }\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n}, [contacts]);\n  */\n\n  // const addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   setContacts([contact, ...contacts]);\n  // };\n  /*\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n*/\n\n  // const deleteContact = contactId => {\n  //   const newContacts = contacts.filter(contact => contact.id !== contactId);\n  //   setContacts(newContacts);\n  // };\n\n  // const visibleContacts = getVisibleContacts();\n\n  return (\n    <div className={s.App}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList /*contactList={getVisibleContacts}*/ />\n    </div>\n  );\n};\n\n// export default App;\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n//   filter: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   addContact: ({ name, number }) =>\n//     dispatch(actions.addContact({ name, number })),\n//   deleteContact: () => dispatch(actions.deleteContact()),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport { contactApi } from './contacts/contactsSlice';\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n// };\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactReducer),\r\n// });\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// const rootReducer = combineReducers({ contacts: contactReducer });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   logger,\r\n// ];\r\n\r\n// const store = configureStore({\r\n//   reducer: {\r\n//     contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n//   },\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactApi.reducerPath]: contactApi.reducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware().concat(contactApi.middleware),\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n","import { useState, useMemo } from 'react';\nimport Context from './context';\n\nexport default function Provider({ children }) {\n  const [filter, setFilter] = useState('');\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // const onLogIn = () => {\n  //   setUser({ name: 'Манго', avatar });\n  //   setIsLoggedIn(true);\n  // };\n\n  // const onLogOut = () => {\n  //   setUser(null);\n  //   setIsLoggedIn(false);\n  // };\n\n  const providerValue = useMemo(() => {\n    return { filter, setFilter };\n  }, [setFilter, filter]);\n\n  return <Context.Provider value={providerValue}>{children}</Context.Provider>;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { store } from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import 'react-toastify/dist/ReactToastify.css';\nimport ContextProvider from './contexts/Provider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ContextProvider>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </ContextProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}